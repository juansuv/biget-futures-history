AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Bitget Trading Orders - Complete API with FastAPI + Lambda + Step Functions'

Parameters:
  BitgetApiKey:
    Type: String
    Default: 'bg_680026a00a63d58058c738c952ce67a2'
    Description: Bitget API Key
  BitgetSecretKey:
    Type: String
    Default: '7abac4a9404e82830db5f9db5e867a8370c7e59dc74e52615c59552d0afbd7c9'
    Description: Bitget Secret Key
    NoEcho: true
  BitgetPassphrase:
    Type: String
    Default: '22Dominic22'
    Description: Bitget Passphrase
    NoEcho: true
  EnableApiGatewayLogs:
    Type: String
    Default: 'true'
    Description: Enable API Gateway CloudWatch logs
    AllowedValues: ['true', 'false']

Globals:
  Function:
    Timeout: 500
    Runtime: python3.9
    Environment:
      Variables:
        BITGET_API_KEY: !Ref BitgetApiKey
        BITGET_SECRET_KEY: !Ref BitgetSecretKey
        BITGET_PASSPHRASE: !Ref BitgetPassphrase

Resources:
  # S3 Bucket for storing large results
  ResultsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'bitget-results-${AWS::StackName}-${AWS::AccountId}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldResults
            Status: Enabled
            ExpirationInDays: 7
      VersioningConfiguration:
        Status: Suspended

  # S3 Bucket Policy for public read access to results
  ResultsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ResultsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${ResultsBucket.Arn}/results/*'
          - Sid: PublicReadGetObjectSymbols
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${ResultsBucket.Arn}/symbol_results/*'

  # Time Range Mapper Lambda Function
  TimeRangeMapperFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: bitget-time-range-mapper
      CodeUri: src/lambdas/time_range_mapper/
      Handler: handler.lambda_handler
      MemorySize: 256
      Timeout: 60

  # Symbol Searcher Lambda Function
  SymbolSearcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: bitget-symbol-searcher
      CodeUri: src/lambdas/symbol_searcher/
      Handler: handler.lambda_handler
      MemorySize: 1024
      Timeout: 900

  # Symbol Unifier Lambda Function
  SymbolUnifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: bitget-symbol-unifier
      CodeUri: src/lambdas/symbol_unifier/
      Handler: handler.lambda_handler
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub '${ResultsBucket.Arn}/*'

  # Symbol Processor Lambda Function
  SymbolProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: bitget-symbol-processor
      CodeUri: src/lambdas/symbol_processor/
      Handler: handler.lambda_handler
      MemorySize: 900
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
              Resource: !Sub '${ResultsBucket.Arn}/*'

  # Result Collector Lambda Function  
  ResultCollectorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: bitget-result-collector
      CodeUri: src/lambdas/result_collector/
      Handler: handler.lambda_handler
      MemorySize: 2000
      Environment:
        Variables:
          RESULTS_BUCKET: !Ref ResultsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
                - s3:GetObjectVersion
              Resource: !Sub '${ResultsBucket.Arn}/*'
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !GetAtt ResultsBucket.Arn

  # Step Function Role
  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt TimeRangeMapperFunction.Arn
                  - !GetAtt SymbolSearcherFunction.Arn
                  - !GetAtt SymbolUnifierFunction.Arn
                  - !GetAtt SymbolProcessorFunction.Arn
                  - !GetAtt ResultCollectorFunction.Arn

  # Step Function State Machine
  OrderExtractionStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: bitget-order-extraction
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Complete Bitget order extraction pipeline with parallel symbol discovery",
          "StartAt": "MapTimeRanges",
          "States": {
            "MapTimeRanges": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${TimeRangeMapperFunction.Arn}",
                "Payload.$": "$"
              },
              "ResultPath": "$.time_ranges",
              "Next": "DiscoverSymbolsInParallel"
            },
            "DiscoverSymbolsInParallel": {
              "Type": "Map",
              "ItemsPath": "$.time_ranges.Payload.time_windows",
              "MaxConcurrency": 10,
              "Iterator": {
                "StartAt": "SearchSymbolsInWindow",
                "States": {
                  "SearchSymbolsInWindow": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                      "FunctionName": "${SymbolSearcherFunction.Arn}",
                      "Payload.$": "$"
                    },
                    "End": true
                  }
                }
              },
              "ResultPath": "$.window_results",
              "Next": "UnifySymbols"
            },
            "UnifySymbols": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${SymbolUnifierFunction.Arn}",
                "Payload.$": "$"
              },
              "ResultPath": "$.unified_symbols",
              "Next": "ProcessSymbolsInParallel"
            },
            "ProcessSymbolsInParallel": {
              "Type": "Map",
              "ItemsPath": "$.unified_symbols.Payload.symbols",
              "MaxConcurrency": 10,
              "Iterator": {
                "StartAt": "ProcessSingleSymbol",
                "States": {
                  "ProcessSingleSymbol": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::lambda:invoke",
                    "Parameters": {
                      "FunctionName": "${SymbolProcessorFunction.Arn}",
                      "Payload": {
                        "symbol.$": "$"
                      }
                    },
                    "End": true
                  }
                }
              },
              "Next": "CollectResults"
            },
            "CollectResults": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ResultCollectorFunction.Arn}",
                "Payload": {
                  "execution_arn.$": "$$.Execution.Name",
                  "collect_from_s3": true
                }
              },
              "End": true
            }
          }
        }


  # FastAPI Lambda Function with API Gateway
  FastApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: bitget-fastapi
      CodeUri: src/api/
      Handler: main.handler
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          STEP_FUNCTION_ARN: !Ref OrderExtractionStateMachine
          RESULTS_BUCKET: !Ref ResultsBucket
      Policies:
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt OrderExtractionStateMachine.Name
        - LambdaInvokePolicy:
            FunctionName: !Ref SymbolProcessorFunction
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - stepfunctions:DescribeExecution
                - stepfunctions:ListExecutions
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectVersion
              Resource: !Sub '${ResultsBucket.Arn}/*'
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !GetAtt ResultsBucket.Arn
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        ApiGatewayRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY

  # API Gateway Configuration
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: !If [EnableLogging, 'INFO', 'OFF']
          DataTraceEnabled: !If [EnableLogging, true, false]
          MetricsEnabled: true
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: !Sub |
          {
            "requestId": "$context.requestId",
            "ip": "$context.identity.sourceIp",
            "caller": "$context.identity.caller",
            "user": "$context.identity.user",
            "requestTime": "$context.requestTime",
            "httpMethod": "$context.httpMethod",
            "resourcePath": "$context.resourcePath",
            "status": "$context.status",
            "protocol": "$context.protocol",
            "responseLength": "$context.responseLength"
          }

  # CloudWatch Log Group for API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}'
      RetentionInDays: 14

Conditions:
  EnableLogging: !Equals [!Ref EnableApiGatewayLogs, 'true']

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  
  StepFunctionArn:
    Description: 'Step Function State Machine ARN'
    Value: !Ref OrderExtractionStateMachine
  
  SymbolProcessorFunctionArn:
    Description: 'Symbol Processor Lambda Function ARN'
    Value: !GetAtt SymbolProcessorFunction.Arn
  
  ResultCollectorFunctionArn:
    Description: 'Result Collector Lambda Function ARN'
    Value: !GetAtt ResultCollectorFunction.Arn

  FastApiFunctionArn:
    Description: 'FastAPI Lambda Function ARN'
    Value: !GetAtt FastApiFunction.Arn
